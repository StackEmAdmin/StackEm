/**
 * A simple random number generator (RNG) using the SFC32 algorithm.
 * This function generates a sequence of 32-bit floating-point numbers in the range [0, 1).
 *
 * @param {number} a - The first state value.
 * @param {number} b - The second state value.
 * @param {number} c - The third state value.
 * @param {number} d - The fourth state value.
 *
 * @returns {Object} - An object containing the updated state values and the generated random number.
 * @returns {number} object.a - The updated first state value.
 * @returns {number} object.b - The updated second state value.
 * @returns {number} object.c - The updated third state value.
 * @returns {number} object.d - The updated fourth state value.
 * @returns {number} object.random - The generated random number in the range [0, 1).
 *
 * @example
 * const { a, b, c, d, random } = sfc32(12345, 67890, 34567, 89012);
 * console.log(`Random number: ${random}`);
 */
function sfc32(a, b, c, d) {
  a |= 0;
  b |= 0;
  c |= 0;
  d |= 0;
  let t = (((a + b) | 0) + d) | 0;
  d = (d + 1) | 0;
  a = b ^ (b >>> 9);
  b = (c + (c << 3)) | 0;
  c = (c << 21) | (c >>> 11);
  c = (c + t) | 0;
  const random = (t >>> 0) / 4294967296;
  return { a, b, c, d, random };
}

/**
 * Generates the next state of the random number generator (RNG) based on the provided current state.
 *
 * @param {Object} rng - The current state of the RNG.
 * @param {number} rng.seed - The initial seed used for the RNG.
 * @param {number} rng.a - The first state value used for the RNG.
 * @param {number} rng.b - The second state value used for the RNG.
 * @param {number} rng.c - The third state value used for the RNG.
 * @param {number} rng.d - The fourth state value used for the RNG.
 * @param {number} rng.random - The random number [0, 1) generated by the RNG.
 *
 * @returns {Object} - The next RNG state.
 * @returns {number} returns.seed - The initial seed used for the RNG.
 * @returns {number} returns.a - The first state value used for the RNG.
 * @returns {number} returns.b - The second state value used for the RNG.
 * @returns {number} returns.c - The third state value used for the RNG.
 * @returns {number} returns.d - The fourth state value used for the RNG.
 * @returns {number} returns.random - The random number [0, 1) generated by the RNG.
 */
function next(rng) {
  const { a, b, c, d, random } = sfc32(rng.a, rng.b, rng.c, rng.d);
  return {
    ...rng,
    a,
    b,
    c,
    d,
    random,
  };
}

/**
 * Creates a state-based number generator with the provided seed.
 * If no seed is provided, a random seed will be generated.
 * Call rngLib.next(yourRNG) to get the next generator state.
 *
 * @param {Array} [seed] - An array of four 32-bit unsigned integers representing the initial seed.
 *                          If no seed is provided, a random seed will be generated.
 *
 * @returns {Object} - An object representing the RNG instance.
 * @returns {Array} object.seed - The initial seed used for the RNG.
 * @returns {number} object.random - The random number [0, 1) generated by the RNG. Initial value is -1.
 *
 * @example
 * const rand = newRNG(seed);
 * rand.seed // returns seed
 *
 * let nextRand = rngLib.next(rand);
 * nextRand.random // returns next random number 'a' in [0, 1)
 * nextRand = rngLib.next(rand);
 * nextRand.random // returns next random number 'b' in [0, 1)
 *
 * rngLib.next(rand).random // returns next random number 'a' in [0, 1)
 * rngLib.next(rand).random // returns same random number 'a' in [0, 1)
 * rngLib.next(rngLib.next(rand)).random // returns next random number 'b' in [0, 1)
 */
function newRNG([
  seed1 = (Math.random() * 2 ** 32) >>> 0,
  seed2 = (Math.random() * 2 ** 32) >>> 0,
  seed3 = (Math.random() * 2 ** 32) >>> 0,
  seed4 = (Math.random() * 2 ** 32) >>> 0,
] = []) {
  const seed = [seed1, seed2, seed3, seed4];
  return {
    seed,
    a: seed1,
    b: seed2,
    c: seed3,
    d: seed4,
    random: -1,
  };
}

const rngLib = { next };
export { newRNG as default, rngLib };
